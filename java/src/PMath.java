/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class PMath {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PMath(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PMath obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PapillonCoreJavaJNI.delete_PMath(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static float getNaNf() {
    return PapillonCoreJavaJNI.PMath_NaNf_get();
  }

  public static double getNaNd() {
    return PapillonCoreJavaJNI.PMath_NaNd_get();
  }

  public static boolean IsNaN(float v) {
    return PapillonCoreJavaJNI.PMath_IsNaN__SWIG_0(v);
  }

  public static boolean IsNaN(double v) {
    return PapillonCoreJavaJNI.PMath_IsNaN__SWIG_1(v);
  }

  public static void Clamp(SWIGTYPE_p_int v, int min, int max) {
    PapillonCoreJavaJNI.PMath_Clamp__SWIG_0(SWIGTYPE_p_int.getCPtr(v), min, max);
  }

  public static void Clamp(SWIGTYPE_p_float v, float min, float max) {
    PapillonCoreJavaJNI.PMath_Clamp__SWIG_1(SWIGTYPE_p_float.getCPtr(v), min, max);
  }

  public static void Clamp(SWIGTYPE_p_double v, double min, double max) {
    PapillonCoreJavaJNI.PMath_Clamp__SWIG_2(SWIGTYPE_p_double.getCPtr(v), min, max);
  }

  public static void LERP(SWIGTYPE_p_float v, float min, float max) {
    PapillonCoreJavaJNI.PMath_LERP__SWIG_0(SWIGTYPE_p_float.getCPtr(v), min, max);
  }

  public static void LERP(SWIGTYPE_p_double v, double min, double max) {
    PapillonCoreJavaJNI.PMath_LERP__SWIG_1(SWIGTYPE_p_double.getCPtr(v), min, max);
  }

  public static int RandInt() {
    return PapillonCoreJavaJNI.PMath_RandInt();
  }

  public static boolean AreAlmostEqual(float v1, float v2, float absoluteError) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqual__SWIG_0(v1, v2, absoluteError);
  }

  public static boolean AreAlmostEqual(float v1, float v2) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqual__SWIG_1(v1, v2);
  }

  public static boolean AreAlmostEqual(double v1, double v2, double absoluteError) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqual__SWIG_2(v1, v2, absoluteError);
  }

  public static boolean AreAlmostEqual(double v1, double v2) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqual__SWIG_3(v1, v2);
  }

  public static boolean AreAlmostEqualULP(float v1, float v2, int maxULP) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqualULP__SWIG_0(v1, v2, maxULP);
  }

  public static boolean AreAlmostEqualULP(float v1, float v2) {
    return PapillonCoreJavaJNI.PMath_AreAlmostEqualULP__SWIG_1(v1, v2);
  }

}
